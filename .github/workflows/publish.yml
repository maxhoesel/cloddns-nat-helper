---
name: Publish
on:
  release:
    types:
      - published
      - created
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  crate-io:
    name: "Publish to crates.io"
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: stable

      - name: Enable cargo caching
        uses: Swatinem/rust-cache@v2

      - name: Publish crate
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}

  build:
    name: Build ${{ matrix.target.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: aarch64-unknown-linux-gnu
            extension: ""
          - name: x86_64-unknown-linux-gnu
            extension: ""
          - name: x86_64-pc-windows-gnu
            extension: ".exe"
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: "${{ matrix.target.name }}"
          override: true
          toolchain: stable

      - name: Enable cargo caching
        uses: Swatinem/rust-cache@v2
        with:
          key: "{{ matrix.target.name }}"

      - name: Get cross
        uses: XAMPPRocky/get-github-release@v1
        id: cross
        with:
          owner: cross-rs
          repo: cross
          matches: cross-x86_64-unknown-linux-musl
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cross
        run: |
          sudo mv ${{ steps.cross.outputs.install_path }} /usr/bin/cross
          sudo chmod +x /usr/bin/cross

      - name: Build release binary
        run: cross build --release --target ${{ matrix.target.name }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.target.name }}
          path: target/${{ matrix.target.name }}/release/${{ github.event.repository.name }}${{ matrix.target.extension }}

  gh-release-artifacts:
    name: Upload ${{ matrix.target }} to GH Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        target:
          - name: aarch64-unknown-linux-gnu
            extension: ""
          - name: x86_64-unknown-linux-gnu
            extension: ""
          - name: x86_64-pc-windows-gnu
            extension: ".exe"
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3

      - name: Get target binary artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.target.name }}
          path: /tmp/${{ github.event.repository.name }}_${{ matrix.target.name }}${{ matrix.target.extension }}

      - name: Create release asset archive
        run: tar cvzf binary.tar.gz --directory=/tmp ${{ github.event.repository.name }}_${{ matrix.target.name }}${{ matrix.target.extension }}

      - name: Get current GitHub release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: binary.tar.gz
          asset_name: ${{ github.event.repository.name }}-${{ matrix.target.name }}.tar.gz
          asset_content_type: application/tar+gzip

  docker:
    name: "Publish Docker image"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: Create binaries folder
        run: mkdir binaries
      - name: Get amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}_x86_64-unknown-linux-gnu
          path: tmp/bin_amd64
      - name: Move binary from artifact
        run: mv tmp/bin_amd64/clouddns-nat-helper binaries/clouddns-nat-helper_amd64
      - name: Get arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}_aarch64-unknown-linux-gnu
          path: tmp/bin_arm64
      - name: Move binary from artifact
        run: mv tmp/bin_arm64/clouddns-nat-helper binaries/clouddns-nat-helper_arm64


      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to quay.io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN}}

      # version is either the major release ('1'), major + minor ('1.2') or full version ('1.2.3-pre.4')
      # Note that no tag '0[-arch]' will be generated, as 0.x versions are unstable and should not be relied upon
      - name: Generate docker tags
        id: tags
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
            quay.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v')}}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v')}}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/tags/v0.') }}
            latest
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.tags.outputs.tags }}
          push: true
          file: Dockerfile.multiarch
          build-args: |
            binary_dir=binaries
            binary_name=${{ github.event.repository.name }}
