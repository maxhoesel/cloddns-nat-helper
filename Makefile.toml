# Don't use cargo-makes included tasks
[config]
skip_core_tasks = true

[env.development]
TARGET_FOLDER = "debug"

[env.release]
RELEASE_FLAG = "--release"
TARGET_FOLDER = "release"

# DEPENDENCIES
[tasks.install-clippy]
private = true
install_crate = { rustup_component_name = "clippy", binary = "clippy", test_arg = "--help" }

[tasks.install-rustfmt]
private = true
install_crate = { rustup_component_name = "rustfmt", binary = "rustfmt", test_arg = "--help" }

[tasks.install-cross]
private = true
install_crate = { crate_name = "cross", binary = "cross", test_arg = "--help" }

[tasks.install-pre-commit-hook]
private = true
script = '''
#!/usr/bin/env bash

if ! command -v pre-commit > /dev/null; then
    cat <<- EOF
+---------------------------------------------------------+
|    Could not find 'pre-commit' executable in PATH       |
|                                                         |
| If you would like to make use of the pre-commit hooks,  |
| install pre-commit, then run 'cargo make dev-env' again |
+---------------------------------------------------------+
EOF
    exit
else
    pre-commit install > /dev/null
fi
'''

[tasks.dev-env]
description = "Configure a development environment"
dependencies = [
    "install-clippy",
    "install-rustfmt",
    "install-pre-commit-hook",
]

# LINTING
[tasks.lint]
description = "Lint this project"
category = "lint"
dependencies = ["clippy", "format"]
[tasks.clippy]
category = "lint"
description = "Run clippy"
dependencies = ["install-clippy"]
command = "cargo"
args = ["clippy"]
[tasks.format]
category = "line"
description = "Format the codebase"
dependencies = ["install-rustfmt"]
command = "cargo"
args = ["fmt"]

# BUILDS
[tasks.build]
category = "build"
description = "Build the project"
command = "cargo"
args = ["build", "--all-features", "@@remove-empty(RELEASE_FLAG)"]
# Officially supported targets
[tasks.build-x86_64-unknown-linux-gnu]
category = "build"
dependencies = ["install-cross"]
command = "cross"
args = ["build", "--all-features", "--target", "x86_64-unknown-linux-gnu", "@@remove-empty(RELEASE_FLAG)"]
[tasks.build-aarch64-unknown-linux-gnu]
category = "build"
dependencies = ["install-cross"]
command = "cross"
args = ["build", "--all-features", "--target", "aarch64-unknown-linux-gnu", "@@remove-empty(RELEASE_FLAG)"]
[tasks.build-x86_64-pc-windows-gnu]
category = "build"
dependencies = ["install-cross"]
command = "cross"
args = ["build", "--all-features", "--target", "x86_64-pc-windows-gnu", "@@remove-empty(RELEASE_FLAG)"]


# TESTS
[tasks.test]
category = "test"
description = "Test the project"
command = "cargo"
args = ["test", "--all-features"]
# Officially supported targets
[tasks.test-x86_64-unknown-linux-gnu]
category = "test"
dependencies = ["install-cross"]
command = "cross"
args = ["test", "--all-features", "--target", "x86_64-unknown-linux-gnu"]
[tasks.test-aarch64-unknown-linux-gnu]
category = "test"
dependencies = ["install-cross"]
command = "cross"
args = ["test", "--all-features", "--target", "aarch64-unknown-linux-gnu"]
[tasks.test-x86_64-pc-windows-gnu]
category = "test"
dependencies = ["install-cross"]
command = "cross"
args = ["test", "--all-features", "--target", "x86_64-pc-windows-gnu"]

[tasks.docker]
description = "Build a local docker image"
command = "docker"
args = [
    "build",
    "-t",
    "${DOCKER_TAG}",
    "."
]
[tasks.docker-multiarch]
description = "Build a multiarch docker image"
dependencies = ["docker-collect-binaries"]
command = "docker"
args = [
    "buildx", "build",
    "-f", "Dockerfile.multiarch",
    "--platform", "linux/amd64,linux/arm64",
    "--build-arg", "binary_dir=binaries",
    "--build-arg", "binary_name=${CARGO_MAKE_CRATE_NAME}",
    "--tag", "${DOCKER_TAG}",
    "--push", "."
]
[tasks.docker-collect-binaries]
private = true
dependencies = [
    "build-aarch64-unknown-linux-gnu",
    "build-x86_64-unknown-linux-gnu",
]
description = "Collect compiled binaries into central location for docker buildx"
script = '''
#!/usr/bin/env bash
mkdir -p ./binaries
cp target/x86_64-unknown-linux-gnu/${TARGET_FOLDER}/${CARGO_MAKE_CRATE_NAME} binaries/${CARGO_MAKE_CRATE_NAME}_amd64
cp target/aarch64-unknown-linux-gnu/${TARGET_FOLDER}/${CARGO_MAKE_CRATE_NAME} binaries/${CARGO_MAKE_CRATE_NAME}_arm64
'''



# MISC
[tasks.docs]
description = "Generate rustdoc for the project"
command = "cargo"
args = ["doc", "--no-deps"]

[tasks.coverage]
description = "Generate a coverage report"
install_crate = "cargo-llvm-cov"
command = "cargo"
args = ["llvm-cov", "--lcov", "--output-path", "lcov.info"]

[tasks.clean]
description = "Cleanup"
dependencies = ["clean-docker-multiarch"]
command = "cargo"
args = ["clean"]

[tasks.clean-docker-multiarch]
private = true
command = "rm"
args = ["-rf", "./binaries"]
